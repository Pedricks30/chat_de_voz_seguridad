import streamlit as st
import pandas as pd
from PIL import Image

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de √çndices de Seguridad Industrial",
    page_icon="üõ°Ô∏è",
    layout="wide"
)

# CSS personalizado
st.html("""
<style>
    div[data-testid="stVerticalBlockBorderWrapper"] {
        gap: 1rem;
    }
    div[data-testid="stMetric"] {
        background-color: #f0f2f6;
        border-radius: 10px;
        padding: 15px;
        border-left: 4px solid #0068c9;
    }
    div[data-testid="stMetricLabel"] p {
        font-size: 16px;
        color: #555;
    }
    div[data-testid="stMetricValue"] {
        font-size: 24px;
        font-weight: bold;
    }
    .formula-box {
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 15px;
        margin: 10px 0;
        border-left: 4px solid #28a745;
    }
    .interpretacion {
        background-color: #e6f7ff;
        border-radius: 5px;
        padding: 15px;
        margin: 10px 0;
        border-left: 4px solid #1890ff;
    }
</style>
""")

# T√≠tulo y descripci√≥n
st.title("üõ°Ô∏è Sistema de C√°lculo de √çndices de Seguridad Industrial")
st.markdown("""
Esta herramienta calcula los principales indicadores de seguridad industrial seg√∫n los est√°ndares internacionales,
incluyendo los ejemplos mostrados en los ejercicios pr√°cticos.
""")

# Sidebar para selecci√≥n de modo
with st.sidebar:
    st.header("Modo de Operaci√≥n")
    modo_calculo = st.radio(
        "Seleccione el tipo de c√°lculo:",
        ("Empresa Individual", "M√∫ltiples Sucursales"),
        index=0
    )

    st.markdown("---")
    st.info("""
    **F√≥rmulas clave:**
    - **√çndice de Frecuencia (IF):**
      - IF = (n √ó 10‚Å∂) / NR
        - n = N√∫mero de accidentes incapacitantes
        - NR = Horas realmente trabajadas

    - **√çndice de Gravedad (IG):**
      - IG = (J √ó 10‚Å∂) / NR
        - J = Jornadas perdidas totales (J = J‚ÇÅ + J‚ÇÇ)
        - J‚ÇÅ = Muertes √ó 6000 + P√©rdida de brazos √ó 4500 + P√©rdida de piernas √ó 3000
        - J‚ÇÇ = Jornadas perdidas por otras lesiones (d√≠as)
        - NR = Horas realmente trabajadas

    - **√çndice de Incidencia (Ii):**
      - Ii = (n √ó 1000) / TP
        - n = N√∫mero de accidentes incapacitantes
        - TP = N√∫mero total de trabajadores expuestos al riesgo

    - **C√°lculo de Horas:**
      - NT = D√≠as trabajados √ó Horas trabajadas √ó Trabajadores √ó Meses trabajados
      - NR = NT - (Nv + Np + Nbe)
        - NT = Horas totales trabajadas
        - Nv = Horas no laboradas por vacaciones
        - Np = Horas no laboradas por permisos
        - Nbe = Horas no laboradas por enfermedad
        - NR = Horas realmente trabajadas
    """)

# Funci√≥n para calcular √≠ndices de una sola empresa
def calcular_empresa_individual():
    st.header("üìã Datos de la Empresa")
    
    with st.expander("üîç Ver ejemplos de referencia", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            **Ejemplo Librer√≠a Bicentenario:**
            - Trabajadores: 15
            - Horas/d√≠a: 8
            - D√≠as/mes: 28
            - Accidentes: 8/a√±o
            """)
        with col2:
            st.markdown("""
            **Resultado esperado:**
            - NR: 40,320 h/a√±o
            - IF: 198.41 ‚âà 198
            """)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        trabajadores = st.number_input("N√∫mero total de trabajadores", min_value=1, value=15)
        horas_dia = st.number_input("Horas trabajadas al d√≠a", min_value=1, max_value=24, value=8)
    with col2:
        dias_mes = st.number_input("D√≠as trabajados al mes", min_value=1, max_value=31, value=28)
        meses_anio = st.number_input("Meses trabajados al a√±o", min_value=1, max_value=12, value=12)
    with col3:
        accidentes = st.number_input("N√∫mero de accidentes incapacitantes en el a√±o", min_value=0, value=8)
    
    st.markdown("---")
    st.subheader("Horas No Laboradas (Ajustes)")
    col1, col2, col3 = st.columns(3)
    with col1:
        nv = st.number_input("Nv (Horas no laboradas por vacaciones)", min_value=0, value=0)
    with col2:
        np = st.number_input("Np (Horas no laboradas por permisos)", min_value=0, value=0)
    with col3:
        n_be = st.number_input("Nbe (Horas no laboradas por enfermedad)", min_value=0, value=0)
    
    st.markdown("---")
    st.subheader("üìâ Datos de Gravedad de Accidentes")
    st.markdown("Ingrese las jornadas perdidas (J‚ÇÇ) o calcule autom√°ticamente:")
    
    metodo_jornadas = st.radio(
        "M√©todo para jornadas perdidas:",
        ("Ingresar directamente", "Calcular por tipo de lesi√≥n"),
        horizontal=True
    )
    
    if metodo_jornadas == "Ingresar directamente":
        j2 = st.number_input("J‚ÇÇ - Jornadas perdidas totales (d√≠as)", min_value=0, value=0)
    else:
        col1, col2, col3 = st.columns(3)
        with col1:
            muertes = st.number_input("N√∫mero de muertes (6000 d√≠as c/u)", min_value=0, value=0)
        with col2:
            brazos = st.number_input("P√©rdida de brazos (4500 d√≠as c/u)", min_value=0, value=0)
        with col3:
            piernas = st.number_input("P√©rdida de piernas (3000 d√≠as c/u)", min_value=0, value=0)
        j2 = (muertes * 6000) + (brazos * 4500) + (piernas * 3000)
        st.info(f"J‚ÇÇ calculado: {j2:,} d√≠as perdidos")
    
    # C√°lculos
    st.markdown("---")
    st.subheader("üî¢ C√°lculos Intermedios")
    
    # Horas totales
    horas_totales = dias_mes * horas_dia * trabajadores * meses_anio
    # Horas realmente trabajadas
    nr = horas_totales - nv - np - n_be
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Horas totales trabajadas (NT)", f"{horas_totales:,.0f} h/a√±o")
        st.metric("Horas no laboradas (Nv + Np + Nbe)", f"{nv + np + n_be:,.0f} h/a√±o")
    with col2:
        st.metric("Horas realmente trabajadas (NR)", f"{nr:,.0f} h/a√±o", delta=f"{(nr/horas_totales*100 if horas_totales>0 else 0):.1f}% del total")
    
    # C√°lculo de √≠ndices
    if nr > 0:
        if_calculado = (accidentes * 1000000) / nr
        ig_calculado = (j2 * 1000000) / nr
    else:
        if_calculado = 0
        ig_calculado = 0
    
    st.markdown("---")
    st.subheader("üìä Resultados Finales")
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("√çndice de Frecuencia (IF)", f"{if_calculado:,.2f}",
                help="N√∫mero de accidentes con lesiones incapacitantes por cada mill√≥n de horas trabajadas")
    with col2:
        st.metric("√çndice de Gravedad (IG)", f"{ig_calculado:,.2f}",
                help="Jornadas perdidas por cada mill√≥n de horas trabajadas")
    
    # Interpretaci√≥n
    with st.expander("üìù Interpretaci√≥n de Resultados", expanded=True):
        st.markdown("""
        **√çndice de Frecuencia (IF):**
        - < 5: Excelente desempe√±o en seguridad
        - 5-15: Buen desempe√±o, oportunidades de mejora
        - 15-25: Requiere atenci√≥n prioritaria
        - > 25: Situaci√≥n cr√≠tica, revisi√≥n inmediata
        """)
        
        st.markdown("""
        **√çndice de Gravedad (IG):**
        - < 100: Accidentes con baja severidad
        - 100-500: Severidad moderada
        - > 500: Alta severidad, revisar protocolos
        """)

# Funci√≥n para c√°lculo de m√∫ltiples sucursales
def calcular_multiple_sucursales():
    st.header("üè¢ C√°lculo para M√∫ltiples Sucursales")
    st.info("Ejemplo basado en la empresa Rocasur con sucursales en Argentina, Bolivia y Colombia")
    
    num_sucursales = st.number_input("N√∫mero de sucursales a evaluar", min_value=1, max_value=10, value=3)
    
    # Crear DataFrame para almacenar datos
    datos_sucursales = pd.DataFrame(columns=[
        'Sucursal', 'Trabajadores', 'Accidentes', 
        'Muertes', 'Brazos', 'Piernas', 'NR', 'IF', 'IG'
    ])
    
    # Contenedor para formularios din√°micos
    with st.form("form_sucursales"):
        cols = st.columns(4)
        for i in range(num_sucursales):
            with st.expander(f"Sucursal {i+1}", expanded=(i==0)):
                c1, c2 = st.columns(2)
                with c1:
                    nombre = st.text_input(f"Nombre sucursal {i+1}", value=f"Sucursal {i+1}")
                    trabajadores = st.number_input(f"Trabajadores {i+1}", min_value=1, value=200 if i==0 else 180 if i==1 else 260)
                    accidentes = st.number_input(f"Accidentes incapacitantes {i+1}", min_value=0, value=32 if i==0 else 18 if i==1 else 22)
                with c2:
                    st.markdown("**Gravedad de accidentes**")
                    muertes = st.number_input(f"Muertes (6000 d√≠as) {i+1}", min_value=0, value=2 if i==0 else 0 if i==1 else 3)
                    brazos = st.number_input(f"P√©rdida brazos (4500 d√≠as) {i+1}", min_value=0, value=1 if i<2 else 0)
                    piernas = st.number_input(f"P√©rdida piernas (3000 d√≠as) {i+1}", min_value=0, value=0 if i==0 else 1)
                
                # C√°lculos para cada sucursal (simplificado)
                horas_semana = 48
                semanas_anio = 53
                nr = horas_semana * semanas_anio * trabajadores
                j2 = (muertes * 6000) + (brazos * 4500) + (piernas * 3000)
                if_val = (accidentes * 1000000) / nr if nr > 0 else 0
                ig_val = (j2 * 1000000) / nr if nr > 0 else 0
                
                datos_sucursales.loc[i] = [
                    nombre, trabajadores, accidentes, 
                    muertes, brazos, piernas, nr, if_val, ig_val
                ]
        
        submitted = st.form_submit_button("Calcular √çndices")
    
    if submitted:
        st.markdown("---")
        st.subheader("üìä Resultados por Sucursal")
        
        # Mostrar tabla resumen
        st.dataframe(datos_sucursales.style.format({
            'NR': '{:,.0f}',
            'IF': '{:,.2f}',
            'IG': '{:,.2f}'
        }), use_container_width=True)
        
        # Gr√°ficos comparativos
        col1, col2 = st.columns(2)
        with col1:
            st.bar_chart(datos_sucursales.set_index('Sucursal')['IF'], color="#ff4b4b")
            st.caption("√çndice de Frecuencia por Sucursal")
        with col2:
            st.bar_chart(datos_sucursales.set_index('Sucursal')['IG'], color="#0068c9")
            st.caption("√çndice de Gravedad por Sucursal")
        
        # C√°lculo de promedios
        st.markdown("---")
        st.subheader("üåç Resumen Global")
        
        total_trabajadores = datos_sucursales['Trabajadores'].sum()
        total_accidentes = datos_sucursales['Accidentes'].sum()
        total_nr = datos_sucursales['NR'].sum()
        total_j2 = datos_sucursales.apply(lambda x: (x['Muertes']*6000 + x['Brazos']*4500 + x['Piernas']*3000), axis=1).sum()
        
        if_global = (total_accidentes * 1000000) / total_nr if total_nr > 0 else 0
        ig_global = (total_j2 * 1000000) / total_nr if total_nr > 0 else 0
        
        col1, col2, col3 = st.columns(3)
        col1.metric("Total Trabajadores", f"{total_trabajadores:,.0f}")
        col2.metric("IF Global", f"{if_global:,.2f}")
        col3.metric("IG Global", f"{ig_global:,.2f}")
        col3.metric("Ii (indice de incidencia) Global", f"{ig_global:,.2f}")

# Selecci√≥n de modo de c√°lculo
if modo_calculo == "Empresa Individual":
    calcular_empresa_individual()
else:
    calcular_multiple_sucursales()

# Notas y referencias
st.markdown("---")
st.caption("""
**Referencias:**  
- Normas NB (Normas Bolivianas)  
- ISO/TS 11602 (Prevenci√≥n de incendios)  
- ISO 20345 (Calzado de seguridad)  
- OSHA 1926.501 (Trabajos en altura)  
- ISO 45001 (Seguridad y salud ocupacional)
""")